library(sf)

#testcsv=read_csv('https://raw.githubusercontent.com/malkuzweny/covid/master/stfipsnames.csv', col_types=cols(.default = "c"))
#testcsv=as.data.frame(testcsv)
#to download csv
#to download shp-need to do for each country/state/metro/county
#^ for package

country_shp <- st_read(dsn="Downloads/ne_10m_admin_0_countries", "ne_10m_admin_0_countries")
state_shp <- st_read(dsn="Downloads/ne_10m_admin_1_states_provinces", "ne_10m_admin_1_states_provinces")
metro_shp <- st_read(dsn="Downloads/cb_2018_us_cbsa_500k", "cb_2018_us_cbsa_500k")
county_shp <- st_read(dsn="Downloads/tl_2019_us_county", "tl_2019_us_county")

county_shp$STATEFP=as.character(droplevels(county_shp$STATEFP))
stfipsnames <- read.csv("Downloads/stfipsnames.csv", colClasses="character")
county_shp=merge(county_shp, stfipsnames, all = TRUE)
county_shp$countystate_abrv <- paste(county_shp$NAMELSAD, county_shp$state_abrv, sep=", ")
#get county, st column


getExactNames <- function(loc_search){
  exact_names=c()
  loc_of_interest=c()
  for (i in loc_search){
    country_match = as.character(droplevels(subset(country_shp$ADMIN, grepl(paste(i, collapse= "|"), country_shp$ADMIN))))
    state_match = as.character(droplevels(subset(state_shp$name, grepl(paste(i, collapse= "|"), state_shp$name))))
    county_match = as.character(subset(county_shp$countystate_abrv, grepl(paste(i, collapse= "|"), county_shp$countystate_abrv)))
    metro_match = as.character(droplevels(subset(metro_shp$NAME, grepl(paste(i, collapse= "|"), metro_shp$NAME))))
    exact_names=c(exact_names, country_match, state_match, county_match, metro_match)
  }
  for (i in exact_names){
    print(i)
    loc_sel <- readline("Is this a location of interest? (Y/N): ")
    if ((loc_sel == "Y")|(loc_sel == "y")){
      loc_of_interest = c(loc_of_interest, i)
    }
    if ((loc_sel != "Y")&(loc_sel != "y")&(loc_sel != "N")&(loc_sel != "n")){
      print("Expected input is Y or N")
      print(i)
      loc_sel <- readline("Is this a location of interest? (Y/N): ")
      if ((loc_sel == "Y")|(loc_sel == "y")){
        loc_of_interest = c(loc_of_interest, i)
      }
    }
  }
  return(loc_of_interest)
}


getLocationCode <- function(location_names){
  exact_loc = getExactNames(location_names)
  iso3codes=c()
  for (i in exact_loc){
    if (i %in% country_shp$ADMIN){
      countryiso3val=as.character(droplevels(country_shp$ADM0_A3[country_shp$ADMIN==i]))
      iso3codes=c(iso3codes, countryiso3val)
    }
    if (i %in% state_shp$name){
      iso3=levels(as.factor(as.character(state_shp$iso_3166_2[state_shp$name==i])))
      countryname=as.character(droplevels(state_shp$gu_a3[state_shp$iso_3166_2==iso3]))
      stateiso3val=paste0(countryname, "_", iso3)
      iso3codes=c(iso3codes, stateiso3val)
    }
    if (i %in% county_shp$countystate_abrv){
      sfips=county_shp$STATEFP[county_shp$countystate_abrv==i]
      cfips=as.character(droplevels(county_shp$COUNTYFP[county_shp$countystate_abrv==i]))
      fipsval=paste0(sfips,cfips)
      sfipsname=paste0("US", sfips)
      iso3=levels(as.factor(as.character(state_shp$iso_3166_2[state_shp$code_local==sfipsname])))
      countryname=as.character(droplevels(state_shp$gu_a3[state_shp$iso_3166_2==iso3]))
      countyiso3val=paste0(countryname, "_", iso3, "_", fipsval)
      iso3codes=c(iso3codes, countyiso3val)
    }
    if (i %in% metro_shp$NAME){
      mfips=as.character(droplevels(metro_shp$CBSAFP[metro_shp$NAME==i]))
      metroiso3val=paste0("METRO_", mfips)
      iso3codes=c(iso3codes, metroiso3val)
    }
  }
  return(iso3codes)
}


getAdmn2Data_old <- function(states_of_interest){
  #locations=getExactNames(states_of_interest, admin_level=1)
  scroll.id <- NULL
  results <- list()
  location.ids <- paste0("%22", paste(states_of_interest, collapse="%22%20OR%20%22"), "%22")
  success <- NULL
  while(is.null(success)){
    dataurl <- paste0(api.url, "query?q=state_name:(",location.ids,")&fetch_all=true&sort=-date&admin_level=2")
    dataurl <- ifelse(is.null(scroll.id), dataurl, paste0(dataurl, "&scroll_id=", scroll.id))
    resp <- fromJSON(dataurl, flatten=TRUE)
    scroll.id <- resp$'_scroll_id'
    results[[length(results) + 1]] <- resp$hits
    success <- resp$success
  }
  hits <- rbind_pages(results)
  return(hits);
}



country_urls = c("https://github.com/malkuzweny/covid/raw/master/country_shp/ne_10m_admin_0_countries.shp", "https://github.com/malkuzweny/covid/raw/master/country_shp/ne_10m_admin_0_countries.cpg",
                 "https://github.com/malkuzweny/covid/raw/master/country_shp/ne_10m_admin_0_countries.dbf", "https://github.com/malkuzweny/covid/raw/master/country_shp/ne_10m_admin_0_countries.prj",
                 "https://github.com/malkuzweny/covid/raw/master/country_shp/ne_10m_admin_0_countries.shx")
country_dest = c("ne_10m_admin_0_countries.shp", "ne_10m_admin_0_countries.cpg", "ne_10m_admin_0_countries.dbf", "ne_10m_admin_0_countries.prj", "ne_10m_admin_0_countries.shx")
for (i in 1:length(country_urls)){
  download.file(country_urls[i], country_dest[i], mode="wb")
}
country_shp=st_read("ne_10m_admin_0_countries.shp")
state_urls = ######
state_dest = #####
for (i in 1:length(state_urls)){
  download.file(state_urls[i], state_dest[i], mode="wb")
}
state_shp = #######
metro_urls = ######
metro_dest = #######
for (i in 1:length(metro_urls)){
  download.file(metro_urls[i], metro_dest[i], mode="wb")
}
metro_shp = #######
county_urls = ####
  country_dest = ####
  for (i in 1:length(county_urls)){
    download.file(county_urls[i], county_dest[i], mode="wb")
  }
county_shp = '####'







