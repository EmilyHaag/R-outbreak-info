library(jsonlite)
library(ggplot2)

api.url <- "https://api.outbreak.info/v1/"

getISO3 <- function(locations_to_search){
  locs_of_interest=c()
  scroll.id <- NULL
  location.ids <- paste0("(name:%22", paste(locations_to_search, collapse="%22%20OR%20name:%22"), "%22)")
  results <- list()
  success <- NULL
  while(is.null(success)){
    dataurl <- paste0(api.url, "query?q=",location.ids,"%20AND%20mostRecent:true&fields=name,location_id,state_name&fetch_all=true")
    dataurl <- gsub(" ", "+", dataurl)
    dataurl <- ifelse(is.null(scroll.id), dataurl, paste0(dataurl, "&scroll_id=", scroll.id))
    resp <- fromJSON(dataurl, flatten=TRUE)
    scroll.id <- resp$'_scroll_id'
    results[[length(results) + 1]] <- resp$hits
    success <- resp$success
  }
  t <- try(rbind_pages(results), silent=T)
  if("try-error" %in% class(t)){
    error=T
  }else{
    hits <- rbind_pages(results)
    df=(hits)
    locs_of_interest=df$location_id
  }
  if (length(locs_of_interest)==length(locations_to_search)){
    return(locs_of_interest)
  }
  if (length(locs_of_interest)!=length(locations_to_search)||error==T){
    locations=c()
    locs_of_interest=c()
    for (i in locations_to_search){
      if (grepl(" ", i, fixed=TRUE)==T){
        locs=paste0("*",i,"*")
        locs=gsub(" ", "*", locs, fixed=TRUE)
      }else{
        locs=paste0("*",i,"*")
      }
      locations=c(locations, locs)
    }
    scroll.id <- NULL
    location.ids <- paste0("(name:", paste(locations, collapse="%20OR%20name:"), ")")
    results <- list()
    success <- NULL
    while(is.null(success)){
      dataurl <- paste0(api.url, "query?q=",location.ids,"%20AND%20mostRecent:true&fields=name,location_id,state_name&fetch_all=true")
      dataurl <- gsub(" ", "+", dataurl)
      dataurl <- ifelse(is.null(scroll.id), dataurl, paste0(dataurl, "&scroll_id=", scroll.id))
      resp <- fromJSON(dataurl, flatten=TRUE)
      scroll.id <- resp$'_scroll_id'
      results[[length(results) + 1]] <- resp$hits
      success <- resp$success
    }
    hits <- rbind_pages(results)
    df=(hits)
    df$name=apply(cbind(df$name, df$state_name), 1, function(x) paste(x[!is.na(x)], collapse = ", "))
    for (i in df$name){
      print(i)
      loc_sel <- readline("Is this a location of interest? (Y/N): ")
      if ((loc_sel == "Y")|(loc_sel == "y")){
        locs_of_interest = c(locs_of_interest, df$location_id[df$name==i])
      }
      if ((loc_sel != "Y")&(loc_sel != "y")&(loc_sel != "N")&(loc_sel != "n")){
        print("Expected input is Y or N")
        print(i)
        loc_sel <- readline("Is this a location of interest? (Y/N): ")
        if ((loc_sel == "Y")|(loc_sel == "y")){
          locs_of_interest = c(locs_of_interest, df$location_id[df$name==i])
        }
      }
    }
  }
  return(locs_of_interest)
}

searchLocations <- function(locations_to_search, admin_level){
  locs_of_interest=c()
  scroll.id <- NULL
  location.ids <- paste0("(name:%22", paste(locations_to_search, collapse="%22%20OR%20name:%22"), "%22)")
  results <- list()
  success <- NULL
  while(is.null(success)){
    dataurl <- paste0(api.url, "query?q=admin_level:", admin_level, "%20AND%20(",location.ids,")%20AND%20mostRecent:true&fields=name,location_id,state_name&fetch_all=true")
    dataurl <- gsub(" ", "+", dataurl)
    dataurl <- ifelse(is.null(scroll.id), dataurl, paste0(dataurl, "&scroll_id=", scroll.id))
    resp <- fromJSON(dataurl, flatten=TRUE)
    scroll.id <- resp$'_scroll_id'
    results[[length(results) + 1]] <- resp$hits
    success <- resp$success
  }
  t <- try(rbind_pages(results), silent=T)
  if("try-error" %in% class(t)){
    error=T
  }else{
    hits <- rbind_pages(results)
    df=(hits)
    locs_of_interest=df$location_id
  }
  if (length(locs_of_interest)==length(locations_to_search)){
    return(df$name)
  }
  if ((length(locs_of_interest)!=length(locations_to_search))|error==T){
    locations=c()
    locs_of_interest=c()
    for (i in locations_to_search){
      if (grepl(" ", i, fixed=TRUE)==T){
        locs=paste0("*",i,"*")
        locs=gsub(" ", "*", locs, fixed=TRUE)
      }else{
        locs=paste0("*",i,"*")
      }
      locations=c(locations, locs)
    }
    scroll.id <- NULL
    location.ids <- paste0("(name:", paste(locations, collapse="%20OR%20name:"), ")")
    results <- list()
    success <- NULL
    while(is.null(success)){
      dataurl <- paste0(api.url, "query?q=admin_level:", admin_level, "%20AND%20(",location.ids,")%20AND%20mostRecent:true&fields=name,location_id,state_name&fetch_all=true")
      dataurl <- gsub(" ", "+", dataurl)
      dataurl <- ifelse(is.null(scroll.id), dataurl, paste0(dataurl, "&scroll_id=", scroll.id))
      resp <- fromJSON(dataurl, flatten=TRUE)
      scroll.id <- resp$'_scroll_id'
      results[[length(results) + 1]] <- resp$hits
      success <- resp$success
    }
    hits <- rbind_pages(results)
    df=hits
    df$name=apply(cbind(df$name, df$state_name), 1, function(x) paste(x[!is.na(x)], collapse = ", "))
    for (i in df$name){
      print(i)
      loc_sel <- readline("Is this a location of interest? (Y/N): ")
      if ((loc_sel == "Y")|(loc_sel == "y")){
        locs_of_interest = c(locs_of_interest, i)
      }
      if ((loc_sel != "Y")&(loc_sel != "y")&(loc_sel != "N")&(loc_sel != "n")){
        print("Expected input is Y or N")
        print(i)
        loc_sel <- readline("Is this a location of interest? (Y/N): ")
        if ((loc_sel == "Y")|(loc_sel == "y")){
          locs_of_interest = c(locs_of_interest, i)
        }
      }
    }
  }
  return(locs_of_interest)
}

getLocationCodes <- function(location_names, admin_level){
  locations <- searchLocations(location_names, admin_level)
  scroll.id <- NULL
  location.ids <- paste0("%22", paste(locations, collapse="%22%20OR%20%22"), "%22")
  results <- list()
  success <- NULL
  while(is.null(success)){
    dataurl <- paste0(api.url, "query?q=name:(",location.ids,")&fetch_all=true&sort=-date&fields=location_id")
    dataurl <- gsub(" ", "+", dataurl)
    dataurl <- ifelse(is.null(scroll.id), dataurl, paste0(dataurl, "&scroll_id=", scroll.id))
    resp <- fromJSON(dataurl, flatten=TRUE)
    scroll.id <- resp$'_scroll_id'
    results[[length(results) + 1]] <- resp$hits
    success <- resp$success
  }
  hits <- rbind_pages(results)
  df=hits
  iso3=unique(df$location_id)
  return(iso3)
}

getLocationData <- function(location_names){
  locations <- getISO3(location_names)
  scroll.id <- NULL
  location.ids <- paste0("%22", paste(locations, collapse="%22%20OR%20%22"), "%22")
  results <- list()
  success <- NULL
  while(is.null(success)){
    dataurl <- paste0(api.url, "query?q=location_id:(",location.ids,")&sort=date&size=1000&fetch_all=true")
    dataurl <- ifelse(is.null(scroll.id), dataurl, paste0(dataurl, "&scroll_id=", scroll.id))
    resp <- fromJSON(dataurl, flatten=TRUE)
    scroll.id <- resp$'_scroll_id'
    results[[length(results) + 1]] <- resp$hits
    success <- resp$success
  }
  hits <- rbind_pages(results)
  return(hits);
}

getAdmn2ByState <- function(states){
  locations <- searchLocations(states, admin_level=1)
  scroll.id <- NULL
  results <- list()
  location.ids <- paste0("%22", paste(locations, collapse="%22%20OR%20%22"), "%22")
  success <- NULL
  while(is.null(success)){
    dataurl <- paste0(api.url, "query?q=state_name:(",location.ids,")&fetch_all=true&sort=-date&admin_level=2")
    dataurl <- gsub(" ", "+", dataurl)
    dataurl <- ifelse(is.null(scroll.id), dataurl, paste0(dataurl, "&scroll_id=", scroll.id))
    resp <- fromJSON(dataurl, flatten=TRUE)
    scroll.id <- resp$'_scroll_id'
    results[[length(results) + 1]] <- resp$hits
    success <- resp$success
  }
  hits <- rbind_pages(results)
  return(hits);
}

getAdmn2ByCountry <- function(){
  scroll.id <- NULL
  results <- list()
  success <- NULL
  while(is.null(success)){
    dataurl <- "https://api.outbreak.info/covid19/query?q=country_name:%22United%20States%20of%20America%22%20AND%20admin_level:2&fetch_all=true"
    dataurl <- ifelse(is.null(scroll.id), dataurl, paste0(dataurl, "&scroll_id=", scroll.id))
    resp <- fromJSON(dataurl, flatten=TRUE)
    scroll.id <- resp$'_scroll_id'
    results[[length(results) + 1]] <- resp$hits
    success <- resp$success
  }
  hits <- rbind_pages(results)
  return(hits)
}

getAdmn1ByCountry <- function(countries){
  locations <- searchLocations(countries, admin_level=0)
  scroll.id <- NULL
  results <- list()
  location.ids <- paste0("%22", paste(locations, collapse="%22%20OR%20%22"), "%22")
  success <- NULL
  while(is.null(success)){
    dataurl <- paste0(api.url, "query?q=country_name:(",location.ids,")%20AND%20admin_level:1&fetch_all=true")
    dataurl <- gsub(" ", "+", dataurl)
    dataurl <- ifelse(is.null(scroll.id), dataurl, paste0(dataurl, "&scroll_id=", scroll.id))
    resp <- fromJSON(dataurl, flatten=TRUE)
    scroll.id <- resp$'_scroll_id'
    results[[length(results) + 1]] <- resp$hits
    success <- resp$success
  }
  hits <- rbind_pages(results)
  return(hits)
}

getMetroByCountry <- function(){
  scroll.id <- NULL
  results <- list()
  success <- NULL
  while(is.null(success)){
    dataurl <- "https://api.outbreak.info/covid19/query?q=country_name:%22United%20States%20of%20America%22%20AND%20admin_level:1.5&fetch_all=true"
    dataurl <- ifelse(is.null(scroll.id), dataurl, paste0(dataurl, "&scroll_id=", scroll.id))
    resp <- fromJSON(dataurl, flatten=TRUE)
    scroll.id <- resp$'_scroll_id'
    results[[length(results) + 1]] <- resp$hits
    success <- resp$success
  }
  hits <- rbind_pages(results)
  return(hits)
}

plotCovid <- function(locations, key){
  df <- getLocationData(locations)
  df$date=as.Date(df$date, "%Y-%m-%d")
  p=ggplot(df, aes(date, get(key), color=name, group = name)) + geom_line() + scale_x_date(date_breaks = "1 week") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + labs(y=key)
  return(p)
}

getAdmn0 <- function(){
  scroll.id <- NULL
  results <- list()
  success <- NULL
  while(is.null(success)){
    dataurl <- "https://api.outbreak.info/covid19/query?q=admin_level:%220%22&fetch_all=true"
    dataurl <- ifelse(is.null(scroll.id), dataurl, paste0(dataurl, "&scroll_id=", scroll.id))
    resp <- fromJSON(dataurl, flatten=TRUE)
    scroll.id <- resp$'_scroll_id'
    results[[length(results) + 1]] <- resp$hits
    success <- resp$success
  }
  hits <- rbind_pages(results)
  return(hits)
}



library(maps)
library(sf)
library(tidyverse)
library(patchwork)
library(RColorBrewer)


##mapping states
states_df=getAdmn1ByCountry("United States of America")
states_df$date=as.Date(states_df$date, "%Y-%m-%d")
first_dates=as.Date(c("2020-02-01", "2020-03-01", "2020-04-01", "2020-05-01", "2020-06-01", "2020-07-01"))
states_df=states_df[states_df$date %in% first_dates, ]
states_df=subset(states_df, select=c("_id", "confirmed_rolling_per_100k", "date", "name", "iso3"))

states_map <- map_data("state")
states_map$region=str_to_title(states_map$region)

feb_df=states_df[states_df$date=="2020-02-01",]
feb_map=left_join(states_map, feb_df, by=c("region"="name"))
feb_map$date="February 1, 2020"
mar_df=states_df[states_df$date=="2020-03-01",]
mar_map=left_join(states_map, mar_df, by=c("region"="name"))
mar_map$date="March 1, 2020"
apr_df=states_df[states_df$date=="2020-04-01",]
apr_map=left_join(states_map, apr_df, by=c("region"="name"))
apr_map$date="April 1, 2020"
may_df=states_df[states_df$date=="2020-05-01",]
may_map=left_join(states_map, may_df, by=c("region"="name"))
may_map$date="May 1, 2020"
june_df=states_df[states_df$date=="2020-06-01",]
june_map=left_join(states_map, june_df, by=c("region"="name"))
june_map$date="June 1, 2020"
july_df=states_df[states_df$date=="2020-07-01",]
july_map=left_join(states_map, july_df, by=c("region"="name"))
july_map$date="July 1, 2020"

covid_map=rbind(feb_map, mar_map, apr_map, may_map, june_map, july_map)
covid_map$date_f = factor(covid_map$date, levels=c("February 1, 2020","March 1, 2020","April 1, 2020","May 1, 2020","June 1, 2020","July 1, 2020"))

ditch_the_axes <- theme(
  axis.text = element_blank(),
  axis.line = element_blank(),
  axis.ticks = element_blank(),
  panel.border = element_blank(),
  panel.grid = element_blank(),
  axis.title = element_blank()
)

ggplot() + geom_polygon(data = covid_map, size=0.25, aes(x=long, y=lat, group=group, fill=confirmed_rolling_per_100k), color="black") + coord_fixed(1.3) + ditch_the_axes + scale_fill_gradient(low = "yellow", high = "red", na.value = "grey") + facet_wrap(~date_f, ncol=2) + theme_bw() + coord_map("albers",lat0=39, lat1=45)


##line graphs
r <- plotCovid(c("Texas", "California", "Washington", "New York", "Florida", "Louisiana"),
               "confirmed")

q <- plotCovid(c("Texas", "California", "Washington", "New York", "Florida", "Louisiana"),
               "confirmed_per_100k")

r + q + plot_layout(ncol = 2) & theme_bw()


t <- plotCovid(c("Texas", "California", "Washington", "New York", "Florida", "Louisiana"),
               "confirmed_rolling")

s <- plotCovid(c("Texas", "California", "Washington", "New York", "Florida", "Louisiana"),
               "confirmed_rolling_per_100k")

t + s + plot_layout(ncol = 2) & theme_bw() & scale_x_date(date_breaks = "2 weeks") & theme(axis.text.x = element_text(angle = 90, hjust = 1))

plotCovid(c("Louisiana", "San Diego County"), "confirmed")
plotCovid(c("Louisiana", "San Diego County"), "confirmed_per_100k")


#things to do: check when SD/LA started to open and mark


##mapping world
world_map <- map_data("world")
world_map[world_map=="USA"] <- "United States of America"

world_df <- getAdmn0()

world_df$date=as.Date(world_df$date, "%Y-%m-%d")
first_dates=as.Date(c("2020-02-01", "2020-03-01", "2020-04-01", "2020-05-01", "2020-06-01", "2020-07-01"))
world_df=world_df[world_df$date %in% first_dates, ]
world_df=subset(world_df, select=c("_id", "confirmed_rolling_per_100k", "date", "name", "iso3"))

feb_df=world_df[world_df$date=="2020-02-01",]
feb_map=left_join(world_map, feb_df, by=c("region"="name"))
feb_map$date="February 1, 2020"
mar_df=world_df[world_df$date=="2020-03-01",]
mar_map=left_join(world_map, mar_df, by=c("region"="name"))
mar_map$date="March 1, 2020"
apr_df=world_df[world_df$date=="2020-04-01",]
apr_map=left_join(world_map, apr_df, by=c("region"="name"))
apr_map$date="April 1, 2020"
may_df=world_df[world_df$date=="2020-05-01",]
may_map=left_join(world_map, may_df, by=c("region"="name"))
may_map$date="May 1, 2020"
june_df=world_df[world_df$date=="2020-06-01",]
june_map=left_join(world_map, june_df, by=c("region"="name"))
june_map$date="June 1, 2020"
july_df=world_df[world_df$date=="2020-07-01",]
july_map=left_join(world_map, july_df, by=c("region"="name"))
july_map$date="July 1, 2020"

covid_map=rbind(feb_map, mar_map, apr_map, may_map, june_map, july_map)
covid_map$date_f = factor(covid_map$date, levels=c("February 1, 2020","March 1, 2020","April 1, 2020","May 1, 2020","June 1, 2020","July 1, 2020"))

ditch_the_axes <- theme(
  axis.text = element_blank(),
  axis.line = element_blank(),
  axis.ticks = element_blank(),
  panel.border = element_blank(),
  panel.grid = element_blank(),
  axis.title = element_blank()
)

covid_map$confirmed_rolling_per_100k_log = log(covid_map$confirmed_rolling_per_100k)

ggplot() + geom_polygon(data = covid_map, aes(x=long, y=lat, group=group, fill=confirmed_rolling_per_100k), color="black") + coord_fixed(1.3) + ditch_the_axes + scale_fill_gradient(low = "yellow", high = "red", na.value = "white", trans = "log") + facet_wrap(~date_f) + theme_bw()

unique(covid_map$confirmed_rolling_per_100k)




